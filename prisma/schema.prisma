generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                        String                @id @unique
  nome                      String
  email                     String                @unique
  senha                     String
  cpf                       String                @unique
  data_de_nascimento        DateTime?
  telefone                  String?
  foto_url                  String?
  descricao                 String?
  logradouro                String?
  numero                    String?
  complemento               String?
  bairro                    String?
  cidade                    String?
  estado                    String?
  cep                       String?
  localizacao               String?
  verificado                StatusDeVerificacao?
  tipo                      TipoDeUsuario
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime              @updatedAt
  token_verificacao         String?
  passwordResetToken        String?
  passwordResetTokenExpires DateTime?
  ambulante                 Ambulante[]
  Denuncias                 Denuncias[]
  Infracoes                 Infracao[]
  InscricoesDeEventos       InscricoesDeEventos[]
}

model Admin {
  id                    String                  @id @unique
  nome                  String
  email                 String                  @unique
  senha                 String
  adminType             AdminType
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  token_verificacao     String?
  verificado            StatusDeVerificacao
  ComentarioDeDenuncias ComentarioDeDenuncias[]
  Infracoes             Infracao[]
  Permissoes            Permissoes[]
}

model Permissoes {
  id                      String  @id @unique
  adminId                 String
  criacao_de_usuario      Boolean
  distribuicao_de_tarefas Boolean
  requisicoes             Boolean
  denuncias               Boolean
  infracoes               Boolean
  eventos                 Boolean
  relatorios_estrategicos Boolean
  admin                   Admin   @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model Ambulante {
  id                      String              @id @unique
  usuario_id              String?
  descricao               String
  status                  StatusDeVerificacao
  nome_do_negoocio        String
  tipo_do_negocio         String
  descricao_do_negocio    String
  localizacao_do__negocio String
  fotos_do_negocio        String[]
  documentacao            String[]
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  usuario                 Usuario?            @relation(fields: [usuario_id], references: [id])
}

model Denuncias {
  id                      String                  @id @unique
  usuario_id              String?
  descricao               String
  status                  StatusDeDenuncia
  localizacao             String?
  fotos                   String[]
  codigo_de_busca         String
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  comentarios_de_denuncia ComentarioDeDenuncias[]
  usuario                 Usuario?                @relation(fields: [usuario_id], references: [id])
}

model ComentarioDeDenuncias {
  id          String    @id @unique
  denuncia_id String
  fiscal_id   String
  descricao   String
  denuncia    Denuncias @relation(fields: [denuncia_id], references: [id], onDelete: Cascade)
  fiscal      Admin     @relation(fields: [fiscal_id], references: [id])
}

model Evento {
  id                  String                @id @unique
  nome                String
  data_de_inicio      DateTime
  data_de_fim         DateTime
  localizacao         String
  ativo               Boolean
  imagens             String[]
  descricao           String
  vagas               Int
  InscricoesDeEventos InscricoesDeEventos[]
}

model InscricoesDeEventos {
  id                String              @id @unique
  evento_id         String
  usuario_id        String
  data_de_inscricao DateTime            @default(now())
  status            StatusDeVerificacao
  evento            Evento              @relation(fields: [evento_id], references: [id], onDelete: Cascade)
  usuario           Usuario             @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
}

model Infracao {
  id                   String   @id @unique
  administrador_id     String
  usuario_id           String
  descricao            String
  latitude             Float
  longitude            Float
  bairro               String
  ponto_de_referencia  String
  observacoes          String
  multa                Float
  prazo                DateTime
  assinatura           String
  status               Int
  imagens              String[]
  providencias         String
  assinatura_digitital String
  createdAt            DateTime @default(now())
  tipo_da_infracao     Int[]
  id_tipo_providencia  Int[]
  admintrador          Admin    @relation(fields: [administrador_id], references: [id])
  usuario              Usuario  @relation(fields: [usuario_id], references: [id])
}

enum TipoDeUsuario {
  PESSOA_FISICA
  PESSOA_JURIDICA
}

enum StatusDeVerificacao {
  PENDENTE
  APROVADO
  REPROVADO
}

enum AdminType {
  SUPER_ADMIN
  GESTOR
  FISCAL
}

enum StatusDeDenuncia {
  RECEBIDA
  EM_ANALISE
  CONCLUIDA
}
